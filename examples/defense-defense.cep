chartype : type.
witch : chartype.
werewolf : chartype.
slayer : chartype.

possible_enemy chartype chartype : bwd.
possible_enemy witch werewolf.
possible_enemy werewolf witch.
possible_enemy werewolf slayer.
possible_enemy slayer werewolf.

nat : type.
z : nat.
s nat : nat.

lt nat nat : bwd.
lt/z : lt z (s N).
lt/s : lt (s N) (s M)
      <- lt N M.

player : type.

class player chartype : pred.
enemy player chartype : pred.
friend player player : pred.

health player nat : pred.
attack player nat : pred.
turn player : pred.
frozen player : pred.

max_health nat : bwd.
max_health (s (s (s z))).

attacking player player nat : pred.

seed player : pred.
gen_turn player : pred.
gen_attack player : pred.
gen_health player : pred.
gen_enemy player : pred.
stage setup = {

  gen : seed X -o gen_turn X * gen_attack X * gen_health X * gen_enemy X.

  gen_health/all : gen_health X -o health X (s (s (s z))).
  gen_att/slayer : gen_attack X * $class X slayer -o attack X (s z).
  gen_att/wolf : gen_attack X * $class X werewolf -o attack X (s z).
  gen_att/witch : gen_attack X * $class X witch -o ().
  gen_enemy/all : 
    gen_enemy X * $class X Class * possible_enemy Class Class' 
      -o enemy X Class'.

}
do/genturns : qui * stage setup -o stage genturns.

restore_class player chartype : pred.
stage genturns = {
  gen_turn X -o turn X.
  restore_class X C -o class X C.
  frozen X * turn X -o ().
}
do/werewolves: qui * stage genturns -o stage werewolves.

stage werewolves = {
  bite 
  : turn W * $class W werewolf * $enemy W Enemyclass
    * $class E Enemyclass * $attack W Att 
    -o attacking W E Att.

  heal/self
  : turn W * $class W werewolf * health W H
    * max_health M * lt H M
    -o health W (s H).

  heal/other
  : turn W * $class W werewolf * $class Other C
    * health Other H * max_health M * lt H M
  -o health Other (s H) * friend Other W.

  run
  : turn W * $class W werewolf * attacking X W _
    -o ().

  get_hit
  : $class W werewolf * attacking Other W (s N)
    * health W (s H) -o attacking Other W N * health W H.

  attack_done
  : attacking Other W z -o ().

  die
  : class W werewolf * health W z -o ().

}
#interactive werewolves.
do/witches: qui * stage werewolves -o stage witches.

stage witches = {

  freeze
  : turn W * $class W witch * $enemy W Class
    * $class Other Class
    -o frozen Other.

  get_attacked
  : $class W witch * attacking Other W (s N)
    * health W (s H) -o health W H * attacking Other W N.
  done_attack
  : attacking Other W z -o ().

  buff
  : turn W * $class W witch * $class Other Class
    * attack Other Attack
    -o attack Other (s Attack) * friend Other W.

  die
  : class W witch * health W z -o ().
}
#interactive witches.
do/slayers: qui * stage witches -o stage slayers.

stage slayers = {

  attack
  : turn S * $class S slayer * $enemy S Class
    * $class Other Class * $attack S Att
    -o attacking S Other Att.

  defend_other
  : turn S * $class S slayer * $class Other Class
  * attacking Attacker Other _
  -o friend Other S.

  block
  : turn S * $class S slayer * attacking Attacker S (s N)
    -o attacking Attacker S N.

  get_hit
  : $class S slayer * attacking Attacker S (s N) 
    * health S (s H)
    -o attacking Attacker S N * health S H.

  attack_done
  : attacking _ _ z -o ().

  die
  : class S slayer * health S z -o ().

}
#interactive slayers.
do/gengenturns: qui * stage slayers -o stage gen_genturns.

stage gen_genturns = {
  class X C -o gen_turn X * restore_class X C.
}
do/genturns' : qui * stage gen_genturns -o stage genturns.

willow : player.
oz : player.
vic : player.
buffy : player.

context init =
{ seed willow, class willow witch,  
  seed oz, class oz werewolf, 
  seed vic, class vic werewolf,
  seed buffy, class buffy slayer
}

#trace _ setup init.
