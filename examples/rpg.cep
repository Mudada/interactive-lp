% attempt at doing the bit in my twine blog post

nat : type.
z : nat.
s nat : nat.

nat-option : type.
none : nat-option.
some nat : nat-option.

subtract nat nat nat-option : bwd.
subtract/z : subtract N z (some N).
subtract/fail : subtract z (s N) none.
subtract/s/succeed 
  : subtract (s N) (s M) (s P)
    <- subtract N M (some P).
subtract/s/fail 
  : subtract (s N) (s M) none
    <- subtract N M none.

lt nat nat : bwd.
lt/z : lt z (s N).
lt/s : lt (s N) (s M)
      <- lt N M.

geq nat nat : bwd.
geq/z : geq N z.
geq/s : geq (s N) (s M)
      <- geq N M.

% capped addition
cplus nat nat nat nat : bwd.
cplus/met : cplus N M T T
          <- geq M T.
cplus/s   : cplus (s N) M T P
          <- lt M T
          <- cplus N (s M) T P.
cplus/z   : cplus z M T M.

max_hp nat : bwd.
- : max_hp (s (s (s (s (s (s (s (s (s z))))))))).
recharge_hp nat : bwd.
- : recharge_hp (s (s (s (s (s (s (s (s (s (s z)))))))))).

health nat : pred.
treasure nat : pred.

init_tok : pred.
context init_ctx = {init_tok}.

stage init = {
  i : init_tok * max_hp N
      -o health N * treasure z.
}
qui * stage init -o stage main * main_screen.

main_screen : pred.
rest_screen : pred.
adventure_screen : pred.

stage main = {
  rest : main_screen -o rest_screen. 
  adventure : main_screen -o adventure_screen.
  shop : main_screen -o shop_screen.
}

qui * stage main * $rest_screen -o stage rest.
qui * stage main * $shop_screen -o stage shop.
qui * stage main * $adventure_screen -o stage adventure.

stage rest = {
  recharge : rest_screen
               * health HP * max_hp Max * recharge_hp Recharge 
               * cplus HP Recharge Max N
              -o health N.
}
% XXX eventually enable this
% qui * stage rest -o stage main * main_screen.

stage shop = {

}
qui * stage shop -o stage main * main_screen.

stage adventure = {

}
qui * stage adventure -o stage main * main_screen.

#trace _ init init_ctx.


