% attempt at doing the bit in my twine blog post

nat : type.
z : nat.
s nat : nat.

nat-option : type.
none : nat-option.
some nat : nat-option.

subtract nat nat nat-option : bwd.
subtract/z : subtract N z (some N).
subtract/fail : subtract z (s N) none.
subtract/s/succeed 
  : subtract (s N) (s M) (some P)
    <- subtract N M (some P).
subtract/s/fail 
  : subtract (s N) (s M) none
    <- subtract N M none.

lt nat nat : bwd.
lt/z : lt z (s N).
lt/s : lt (s N) (s M)
      <- lt N M.

geq nat nat : bwd.
geq/z : geq N z.
geq/s : geq (s N) (s M)
      <- geq N M.

plus nat nat nat : bwd.
plus/z : plus z N N.
plus/s : plus (s N) M (s P)
        <- plus N M P.

% capped addition
cplus nat nat nat nat : bwd.
cplus/met : cplus N M T T
          <- geq M T.
cplus/s   : cplus (s N) M T P
          <- lt M T
          <- cplus N (s M) T P.
cplus/z   : cplus z M T M.

max_hp nat : bwd.
- : max_hp (s (s (s (s (s (s (s (s (s z))))))))).
recharge_hp nat : bwd.
- : recharge_hp (s (s (s (s (s (s (s (s (s (s z)))))))))).

ndays nat : pred.
health nat : pred.
treasure nat : pred.

init_tok : pred.
context init_ctx = {init_tok}.

stage init = {
  i : init_tok * max_hp N
      -o health N * treasure z * ndays z.
}
qui * stage init -o stage main * main_screen.

main_screen : pred.
rest_screen : pred.
adventure_screen : pred.
quit : pred.

% TODO should be "interactive stage" when that exists
stage main = {
  do/rest : main_screen -o rest_screen. 
  do/adventure : main_screen -o adventure_screen.
  do/shop : main_screen -o shop_screen.

  % comment out for autogen version
  % do/quit : main_screen -o quit.
}

qui * stage main * $rest_screen -o stage rest.
qui * stage main * $shop_screen -o stage shop.
qui * stage main * $adventure_screen -o stage adventure.
qui * stage main * quit -o ().

stage rest = {
  recharge : rest_screen
               * health HP * max_hp Max * recharge_hp Recharge 
               * cplus HP Recharge Max N
               * ndays NDAYS
              -o health N * ndays (s NDAYS).
}
qui * stage rest -o stage main * main_screen.

stage shop = {
  r : shop_screen -o ().
}
qui * stage shop -o stage main * main_screen.

monster_size nat : bwd.
monster_size (s (s z)).
monster_size (s (s (s z))).
monster_size (s (s (s (s (s z))))).

monster nat : pred.
monster_hp nat : pred.
fight_screen : pred.
flee_screen : pred.
spoils nat : pred.
mkchoice : pred.

stage adventure = {
  init : adventure_screen -o spoils z.
}
qui * stage adventure -o stage fight * fight_screen.

fought : pred.
drop nat : pred.
win_screen : pred.
lose_screen : pred.
die_screen : pred.

% drop_amount M N means a monster of size M can drop N coins
drop_amount nat nat : bwd.
drop_amount X X. % for now

% XXX move this up
weapon_damage nat : pred.
weapon_damage (s (s z)).

fight_in_progress : pred.
stage fight = {
  init : fight_screen -o gen_monster * fight_in_progress.
  gen_a_monster : gen_monster * monster_size Size
                    -o monster Size * monster_hp Size.
  fight/hit
    : $fight_in_progress * monster_hp MHP * weapon_damage D
        * subtract MHP D (some MHP')
        -o monster_hp MHP.
  win
    : fight_in_progress * monster_hp MHP * weapon_damage D
        * subtract MHP D none
        -o win_screen.
  fight/miss
    : $fight_in_progress * monster Size * health HP
            * subtract HP Size (some HP')
        -o health HP'.
  flee
    : fight_in_progress -o flee_screen.
  die_from_damages
    : health z -o die_screen.
  fight/die  
    : fight_in_progress * monster Size * health HP
            * subtract HP Size none
            -o die_screen.
}
qui * stage fight * $win_screen -o stage win.
qui * stage fight * $flee_screen -o stage flee.
qui * stage fight * $die_screen -o stage die.

stage flee = {
  % lose spoils
  do/flee : flee_screen * spoils X * monster _ * monster_hp _
              -o ().
}
qui * stage flee -o stage main * main_screen.

go_home_or_continue : pred.
stage win = {
  win  
    : win_screen * monster Size * drop_amount Size Drop 
          -o drop Drop. 
  collect_spoils
    : drop X * spoils Y * plus X Y Z
      -o spoils Z * go_home_or_continue.
  go_home
    : go_home_or_continue
      * spoils X * treasure Y * plus X Y Z
      -o treasure Z * main_screen.
  continue
    : go_home_or_continue -o fight_screen.
}
qui * stage win * $main_screen -o stage main.
qui * stage win * $fight_screen -o stage fight.
qui * stage win -o stage adventure * adventure_screen.

stage die = {
  end : die_screen -o ().
}

#trace _ init init_ctx.


