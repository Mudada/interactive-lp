% attempt at doing the bit in my twine blog post

nat : type.
z : nat.
s nat : nat.

nat-option : type.
none : nat-option.
some nat : nat-option.

subtract nat nat nat-option : bwd.
subtract/z : subtract N z (some N).
subtract/fail : subtract z (s N) none.
subtract/s/succeed 
  : subtract (s N) (s M) (s P)
    <- subtract N M (some P).
subtract/s/fail 
  : subtract (s N) (s M) none
    <- subtract N M none.

% capped addition
lt nat nat : bwd.
geq nat nat : bwd.
% XXX define these next
% then do cplus in terms of them
cplus nat nat nat nat : bwd.
cplus/z : cplus z N Cap N.
cplus/cap : cplus _ Cap Cap Cap.
cplus/s : cplus (s N) M Cap _
          <- cplus N M Cap P 

max_hp nat : bwd.
- : max_hp (s (s (s (s (s (s (s (s (s z))))))))).
recharge_hp nat : bwd.
- : recharge_hp (s (s (s (s (s (s (s (s (s (s z)))))))))).

health nat : pred.
treasure nat : pred.

main_screen : pred.
rest_screen : pred.
adventure_screen : pred.

stage main = {
  rest : main_screen -o rest_screen. 
  adventure : main_screen -o adventure_screen.
  shop : main_screen -o shop_screen.
}

qui * stage main * rest_screen -o stage rest.
qui * stage main * shop_screen -o stage shop.
qui * stage main * adventure_screen -o stage adventure.

stage rest = {
  recharge : health _ * max_hp N -o health N.
}


